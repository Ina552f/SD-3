DROP TABLE IF EXISTS Courses;
DROP TABLE IF EXISTS Grade;
DROP TABLE IF EXISTS Student;

CREATE TABLE IF NOT EXISTS  Courses(
    ID TEXT NOT NULL PRIMARY KEY,
    Name Text,
    Teacher Text,
    Semester Text,
    Year Integer
);
CREATE TABLE IF NOT EXISTS Grade(
    StudentID TEXT REFERENCES Student ON UPDATE CASCADE ON DELETE RESTRICT,
    CourseID TEXT REFERENCES Courses ON UPDATE CASCADE ON DELETE RESTRICT,
    Grade Integer,
    PRIMARY KEY (StudentID, CourseID, Grade),
    FOREIGN KEY (StudentID) REFERENCES Student (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Courses (ID) ON DELETE RESTRICT ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS Student(
    ID TEXT NOT NULL PRIMARY KEY,
    Name Text,
    City Text,
    ZipCode Integer,
    Country Text
);

ALTER TABLE Courses RENAME TO CourseInfo;
ALTER TABLE CourseInfo RENAME TO Courses;
ALTER TABLE Student RENAME TO StudentInfo;
ALTER TABLE StudentInfo RENAME TO Student;
ALTER TABLE Grade RENAME TO GradeInfo;
ALTER TABLE GradeInfo RENAME TO Grade;

INSERT INTO Courses (ID, Name, Teacher, Semester, Year) VALUES ('SD1', 'SD', 'Line', 'Autumn', 2019),
                                                               ('SD2', 'SD', 'Line', 'Spring', 2020),
                                                               ('ES1', 'ES', 'Ebbe', 'Autumn', 2019);

INSERT INTO Student (ID, Name, City, ZipCode, Country) VALUES ('AILI', 'Aisha Lincoln', 'Nykøbing F', 4800, 'Denmark'),
                                                              ('ANNI', 'Anya Nielsen', 'Nykøbing F', 4800, 'Denmark'),
                                                              ('ALJE', 'Alfred Jensen', 'Karlskrona', null, 'Sweden'),
                                                              ('BEBE', 'Berta Bertelsen', 'Billund', 7190, 'Denmark'),
                                                              ('ALAN', 'Albert Antonsen', 'Sorø', 4180, 'Denmark'),
                                                              ('ESER', 'Eske Eriksen', 'Eskildstrup', 4863, 'Denmark'),
                                                              ('OLOL', 'Olaf Olesen', 'Odense', 5000, 'Denmark'),
                                                              ('SASI', 'Salma Simonsen', 'Stockholm', null, 'Sweden'),
                                                              ('THTH', 'Theis Thomasen', 'Tølløse', 4340, 'Denmark'),
                                                              ('JAJE', 'Janet Jensen', 'Jyllinge', 4040, 'Denmark');

INSERT INTO Grade (StudentID, CourseID, Grade) VALUES ('AILI',0,12), ('AILI',2,10),('ANNI',1,null),('ANNI',2,12),
                                                      ('ALJE',0,7), ('ALJE',2,10),('BEBE',1,null),('BEBE',2,2),
                                                      ('ALAN',0,10),('ALAN',2,7),('ESER',1,null),('ESER',2,10),
                                                      ('OLOL',0,4), ('OLOL',2,12),('SASI',1,null),('SASI',2,12),
                                                      ('THTH',0,12),('THTH',2,12),('JAJE',1,null),('JAJE',2,7);

-- Shows all data provided
SELECT Courses.ID, Courses.Name, Courses.Semester, Courses.Year, Courses.Teacher, Grade.Grade, Student.ID, Student.Name
FROM Student LEFT JOIN Grade ON Student.ID = Grade.StudentID
             LEFT JOIN Courses ON Grade.CourseID = Courses.ID
GROUP BY Courses.Name, Student.ID;

-- Shows student name, courses and grades
SELECT G1.StudentID, S1.Name, C1.Name, G1.CourseID, G1.Grade
FROM Courses AS C1 JOIN Grade AS G1 ON C1.ID = G1.CourseID
                   LEFT JOIN Student AS S1 ON G1.StudentID = S1.ID
WHERE G1.StudentID = ?;

-- Retrieves courses taken and grade from selected student
SELECT S1.Name, G1.StudentID, G1.Grade
FROM Student AS S1 JOIN Grade AS G1 ON S1.ID = G1.StudentID
WHERE StudentID = ?;

-- Shows how many students attend a specific course
SELECT Student.ID, Grade.Grade, Student.Name, Courses.ID, Courses.Name, Courses.Semester, Courses.Year, Courses.Teacher
FROM Student LEFT JOIN Grade ON Student.ID= Grade.StudentID
             LEFT JOIN Courses ON Grade.CourseID = Courses.ID
WHERE Courses.ID = ?;

-- Shows average grade from Grade Table
SELECT AVG(Grade)
FROM Grade;

-- Shows the average grade of students from the courses
SELECT Student.ID, AVG(Grade.Grade) AS avgGrade
FROM Student LEFT JOIN Grade ON Student.ID= Grade.StudentID
GROUP BY Student.ID;

-- Shows the average grade of individual courses
SELECT Courses.ID, AVG(Grade.Grade) AS avgClassGrade
FROM Courses LEFT JOIN Grade ON Courses.ID = Grade.CourseID
GROUP BY Courses.ID;

-- Shows the conditions for searching student name, course and grade
SELECT G1.StudentID, S1.Name, C1.Name, G1.CourseID, G1.Grade
FROM Courses AS C1 JOIN Grade AS G1 ON C1.ID = G1.CourseID
                  LEFT JOIN Student AS S1 ON G1.StudentID = S1.ID
WHERE G1.StudentID = ? AND G1.CourseID = ?;

-- Shows average grade for selected student ID
SELECT S1.Name, avg(G1.Grade)
FROM Student AS S1 JOIN Grade AS G1 ON G1.StudentID = S1.ID
WHERE G1.StudentID = ?;

-- Shows average grade for selected course ID
SELECT  C1.Name, avg(G1.Grade)
FROM Courses AS C1 JOIN Grade AS G1 ON C1.ID = G1.CourseID
WHERE G1.CourseID = ?;

-- Shows courses which have not given grade yet
SELECT DISTINCT C1.ID, C1.Name, C1.Teacher, C1.Semester, C1.Year
FROM Courses AS C1
         JOIN Grade AS G1 ON C1.ID = G1.CourseID
WHERE Grade IS NULL;

-- Update the student grade if they value is null
UPDATE Grade
SET Grade = ? WHERE StudentID = ? AND CourseID = ? AND Grade IS NULL;

-- Update the student grade
UPDATE Grade
SET Grade = ? WHERE StudentID = ? AND CourseID = ?;
